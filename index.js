#!/usr/bin/env node
// Generated by LiveScript 1.3.1
(function(){
  var docopt, bb, fs, sh, glob, _, Promise, parse, doc, getOption, o, subst, genLatex, stars, render, filename, genLatexObject, genChapters, files, f, join$ = [].join;
  docopt = require('docopt').docopt;
  bb = require('bluebird');
  fs = bb.promisifyAll(require('fs'));
  sh = bb.promisifyAll(require('shelljs'));
  glob = require('glob');
  _ = require('lodash');
  Promise = bb;
  parse = require('./lib/parsey').parse;
  fs = require('fs');
  doc = "Usage:\n    book-cli FILE...\n    book-cli -h | --help\n\nArgument:\n    FILE                One or more files to be reordered";
  getOption = function(a, b, def, o){
    if (!o[a] && !o[b]) {
      return def;
    } else {
      return o[b];
    }
  };
  o = docopt(doc);
  subst = function(text){
    text = text.replace(/begin{quote}/g, 'begin{em}');
    text = text.replace(/end{quote}/g, 'end{em}\\vspace{.8em}');
    return text;
  };
  genLatex = function(content){
    return new Promise(function(resolve){
      var c;
      c = sh.exec('pandoc -t latex', {
        async: true,
        silent: true
      }, function(code, data){
        data = subst(data);
        return resolve(data);
      });
      c.stdin.write(content);
      return c.stdin.end();
    });
  };
  stars = function(d){
    var i;
    return '$' + (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = (fn$())).length; i$ < len$; ++i$) {
        i = ref$[i$];
        results$.push('\\star');
      }
      return results$;
      function fn$(){
        var i$, to$, results$ = [];
        for (i$ = 1, to$ = d; i$ <= to$; ++i$) {
          results$.push(i$);
        }
        return results$;
      }
    }()).join('') + '$';
  };
  render = function(metadata, content){
    return (function(){
      return "\\newpage\n\\section{" + this.title + "}\n\\textbf{\\sffamily DifficoltÃ }: " + stars(this.difficulty) + " \\hspace{1.5em} \\textbf{\\sffamily Linguaggio}: {\\sffamily " + this.language + "} \\hspace{1.5em} \\textbf{\\sffamily Argomenti}: {\\sffamily " + join$.call(this.tags, ' ') + " } \\\\\n\n\\vspace{1.3em}\n\n\n" + content;
    }.call(metadata));
  };
  filename = getOption('-f', '--file', '/dev/stdin', o);
  genLatexObject = function(markdown){
    var parsed;
    parsed = parse(markdown);
    return genLatex(parsed.mdContent).then(function(it){
      parsed.latexContent = render(parsed.metadata, it);
      return parsed;
    });
  };
  genChapters = function(data){
    var k, v, s, d, results$ = [];
    for (k in data) {
      v = data[k];
      s = "\n\\chapter{" + k + "}\n\n" + (fn$()).join('\n\n') + "\n";
      results$.push(console.log(s));
    }
    return results$;
    function fn$(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = v).length; i$ < len$; ++i$) {
        d = ref$[i$];
        results$.push(d.latexContent);
      }
      return results$;
    }
  };
  files = o['FILE'];
  bb.all((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = files).length; i$ < len$; ++i$) {
      f = ref$[i$];
      results$.push(fs.readFileAsync(f, 'utf-8'));
    }
    return results$;
  }())).then(function(data){
    var d;
    return bb.all((function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = data).length; i$ < len$; ++i$) {
        d = ref$[i$];
        results$.push(genLatexObject(d));
      }
      return results$;
    }())).then(function(data){
      var k, v;
      data = _.groupBy(data, function(it){
        return it.metadata.language;
      });
      for (k in data) {
        v = data[k];
        data[k] = _.sortBy(v, fn$);
      }
      return genChapters(data);
      function fn$(it){
        return it.metadata.difficulty;
      }
    });
  });
}).call(this);
